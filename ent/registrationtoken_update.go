// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/database64128/proxy-sharing-go/ent/account"
	"github.com/database64128/proxy-sharing-go/ent/predicate"
	"github.com/database64128/proxy-sharing-go/ent/registrationtoken"
)

// RegistrationTokenUpdate is the builder for updating RegistrationToken entities.
type RegistrationTokenUpdate struct {
	config
	hooks    []Hook
	mutation *RegistrationTokenMutation
}

// Where appends a list predicates to the RegistrationTokenUpdate builder.
func (rtu *RegistrationTokenUpdate) Where(ps ...predicate.RegistrationToken) *RegistrationTokenUpdate {
	rtu.mutation.Where(ps...)
	return rtu
}

// SetUpdateTime sets the "update_time" field.
func (rtu *RegistrationTokenUpdate) SetUpdateTime(t time.Time) *RegistrationTokenUpdate {
	rtu.mutation.SetUpdateTime(t)
	return rtu
}

// SetName sets the "name" field.
func (rtu *RegistrationTokenUpdate) SetName(s string) *RegistrationTokenUpdate {
	rtu.mutation.SetName(s)
	return rtu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rtu *RegistrationTokenUpdate) SetNillableName(s *string) *RegistrationTokenUpdate {
	if s != nil {
		rtu.SetName(*s)
	}
	return rtu
}

// SetToken sets the "token" field.
func (rtu *RegistrationTokenUpdate) SetToken(b []byte) *RegistrationTokenUpdate {
	rtu.mutation.SetToken(b)
	return rtu
}

// AddRegistrationIDs adds the "registrations" edge to the Account entity by IDs.
func (rtu *RegistrationTokenUpdate) AddRegistrationIDs(ids ...int) *RegistrationTokenUpdate {
	rtu.mutation.AddRegistrationIDs(ids...)
	return rtu
}

// AddRegistrations adds the "registrations" edges to the Account entity.
func (rtu *RegistrationTokenUpdate) AddRegistrations(a ...*Account) *RegistrationTokenUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rtu.AddRegistrationIDs(ids...)
}

// Mutation returns the RegistrationTokenMutation object of the builder.
func (rtu *RegistrationTokenUpdate) Mutation() *RegistrationTokenMutation {
	return rtu.mutation
}

// ClearRegistrations clears all "registrations" edges to the Account entity.
func (rtu *RegistrationTokenUpdate) ClearRegistrations() *RegistrationTokenUpdate {
	rtu.mutation.ClearRegistrations()
	return rtu
}

// RemoveRegistrationIDs removes the "registrations" edge to Account entities by IDs.
func (rtu *RegistrationTokenUpdate) RemoveRegistrationIDs(ids ...int) *RegistrationTokenUpdate {
	rtu.mutation.RemoveRegistrationIDs(ids...)
	return rtu
}

// RemoveRegistrations removes "registrations" edges to Account entities.
func (rtu *RegistrationTokenUpdate) RemoveRegistrations(a ...*Account) *RegistrationTokenUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rtu.RemoveRegistrationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *RegistrationTokenUpdate) Save(ctx context.Context) (int, error) {
	rtu.defaults()
	return withHooks(ctx, rtu.sqlSave, rtu.mutation, rtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *RegistrationTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *RegistrationTokenUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *RegistrationTokenUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtu *RegistrationTokenUpdate) defaults() {
	if _, ok := rtu.mutation.UpdateTime(); !ok {
		v := registrationtoken.UpdateDefaultUpdateTime()
		rtu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtu *RegistrationTokenUpdate) check() error {
	if v, ok := rtu.mutation.Name(); ok {
		if err := registrationtoken.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RegistrationToken.name": %w`, err)}
		}
	}
	if v, ok := rtu.mutation.Token(); ok {
		if err := registrationtoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "RegistrationToken.token": %w`, err)}
		}
	}
	return nil
}

func (rtu *RegistrationTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(registrationtoken.Table, registrationtoken.Columns, sqlgraph.NewFieldSpec(registrationtoken.FieldID, field.TypeInt))
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.UpdateTime(); ok {
		_spec.SetField(registrationtoken.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := rtu.mutation.Name(); ok {
		_spec.SetField(registrationtoken.FieldName, field.TypeString, value)
	}
	if value, ok := rtu.mutation.Token(); ok {
		_spec.SetField(registrationtoken.FieldToken, field.TypeBytes, value)
	}
	if rtu.mutation.RegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registrationtoken.RegistrationsTable,
			Columns: []string{registrationtoken.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedRegistrationsIDs(); len(nodes) > 0 && !rtu.mutation.RegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registrationtoken.RegistrationsTable,
			Columns: []string{registrationtoken.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registrationtoken.RegistrationsTable,
			Columns: []string{registrationtoken.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registrationtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rtu.mutation.done = true
	return n, nil
}

// RegistrationTokenUpdateOne is the builder for updating a single RegistrationToken entity.
type RegistrationTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RegistrationTokenMutation
}

// SetUpdateTime sets the "update_time" field.
func (rtuo *RegistrationTokenUpdateOne) SetUpdateTime(t time.Time) *RegistrationTokenUpdateOne {
	rtuo.mutation.SetUpdateTime(t)
	return rtuo
}

// SetName sets the "name" field.
func (rtuo *RegistrationTokenUpdateOne) SetName(s string) *RegistrationTokenUpdateOne {
	rtuo.mutation.SetName(s)
	return rtuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rtuo *RegistrationTokenUpdateOne) SetNillableName(s *string) *RegistrationTokenUpdateOne {
	if s != nil {
		rtuo.SetName(*s)
	}
	return rtuo
}

// SetToken sets the "token" field.
func (rtuo *RegistrationTokenUpdateOne) SetToken(b []byte) *RegistrationTokenUpdateOne {
	rtuo.mutation.SetToken(b)
	return rtuo
}

// AddRegistrationIDs adds the "registrations" edge to the Account entity by IDs.
func (rtuo *RegistrationTokenUpdateOne) AddRegistrationIDs(ids ...int) *RegistrationTokenUpdateOne {
	rtuo.mutation.AddRegistrationIDs(ids...)
	return rtuo
}

// AddRegistrations adds the "registrations" edges to the Account entity.
func (rtuo *RegistrationTokenUpdateOne) AddRegistrations(a ...*Account) *RegistrationTokenUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rtuo.AddRegistrationIDs(ids...)
}

// Mutation returns the RegistrationTokenMutation object of the builder.
func (rtuo *RegistrationTokenUpdateOne) Mutation() *RegistrationTokenMutation {
	return rtuo.mutation
}

// ClearRegistrations clears all "registrations" edges to the Account entity.
func (rtuo *RegistrationTokenUpdateOne) ClearRegistrations() *RegistrationTokenUpdateOne {
	rtuo.mutation.ClearRegistrations()
	return rtuo
}

// RemoveRegistrationIDs removes the "registrations" edge to Account entities by IDs.
func (rtuo *RegistrationTokenUpdateOne) RemoveRegistrationIDs(ids ...int) *RegistrationTokenUpdateOne {
	rtuo.mutation.RemoveRegistrationIDs(ids...)
	return rtuo
}

// RemoveRegistrations removes "registrations" edges to Account entities.
func (rtuo *RegistrationTokenUpdateOne) RemoveRegistrations(a ...*Account) *RegistrationTokenUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rtuo.RemoveRegistrationIDs(ids...)
}

// Where appends a list predicates to the RegistrationTokenUpdate builder.
func (rtuo *RegistrationTokenUpdateOne) Where(ps ...predicate.RegistrationToken) *RegistrationTokenUpdateOne {
	rtuo.mutation.Where(ps...)
	return rtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rtuo *RegistrationTokenUpdateOne) Select(field string, fields ...string) *RegistrationTokenUpdateOne {
	rtuo.fields = append([]string{field}, fields...)
	return rtuo
}

// Save executes the query and returns the updated RegistrationToken entity.
func (rtuo *RegistrationTokenUpdateOne) Save(ctx context.Context) (*RegistrationToken, error) {
	rtuo.defaults()
	return withHooks(ctx, rtuo.sqlSave, rtuo.mutation, rtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *RegistrationTokenUpdateOne) SaveX(ctx context.Context) *RegistrationToken {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *RegistrationTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *RegistrationTokenUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtuo *RegistrationTokenUpdateOne) defaults() {
	if _, ok := rtuo.mutation.UpdateTime(); !ok {
		v := registrationtoken.UpdateDefaultUpdateTime()
		rtuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtuo *RegistrationTokenUpdateOne) check() error {
	if v, ok := rtuo.mutation.Name(); ok {
		if err := registrationtoken.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RegistrationToken.name": %w`, err)}
		}
	}
	if v, ok := rtuo.mutation.Token(); ok {
		if err := registrationtoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "RegistrationToken.token": %w`, err)}
		}
	}
	return nil
}

func (rtuo *RegistrationTokenUpdateOne) sqlSave(ctx context.Context) (_node *RegistrationToken, err error) {
	if err := rtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(registrationtoken.Table, registrationtoken.Columns, sqlgraph.NewFieldSpec(registrationtoken.FieldID, field.TypeInt))
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RegistrationToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, registrationtoken.FieldID)
		for _, f := range fields {
			if !registrationtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != registrationtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtuo.mutation.UpdateTime(); ok {
		_spec.SetField(registrationtoken.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := rtuo.mutation.Name(); ok {
		_spec.SetField(registrationtoken.FieldName, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.Token(); ok {
		_spec.SetField(registrationtoken.FieldToken, field.TypeBytes, value)
	}
	if rtuo.mutation.RegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registrationtoken.RegistrationsTable,
			Columns: []string{registrationtoken.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedRegistrationsIDs(); len(nodes) > 0 && !rtuo.mutation.RegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registrationtoken.RegistrationsTable,
			Columns: []string{registrationtoken.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registrationtoken.RegistrationsTable,
			Columns: []string{registrationtoken.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RegistrationToken{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registrationtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rtuo.mutation.done = true
	return _node, nil
}
