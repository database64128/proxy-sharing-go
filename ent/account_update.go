// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/database64128/proxy-sharing-go/ent/account"
	"github.com/database64128/proxy-sharing-go/ent/node"
	"github.com/database64128/proxy-sharing-go/ent/predicate"
	"github.com/database64128/proxy-sharing-go/ent/server"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// Where appends a list predicates to the AccountUpdate builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *AccountUpdate) SetUpdateTime(t time.Time) *AccountUpdate {
	au.mutation.SetUpdateTime(t)
	return au
}

// SetUsername sets the "username" field.
func (au *AccountUpdate) SetUsername(s string) *AccountUpdate {
	au.mutation.SetUsername(s)
	return au
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (au *AccountUpdate) SetNillableUsername(s *string) *AccountUpdate {
	if s != nil {
		au.SetUsername(*s)
	}
	return au
}

// SetRegistrationToken sets the "registration_token" field.
func (au *AccountUpdate) SetRegistrationToken(b []byte) *AccountUpdate {
	au.mutation.SetRegistrationToken(b)
	return au
}

// SetAccessToken sets the "access_token" field.
func (au *AccountUpdate) SetAccessToken(b []byte) *AccountUpdate {
	au.mutation.SetAccessToken(b)
	return au
}

// SetRefreshToken sets the "refresh_token" field.
func (au *AccountUpdate) SetRefreshToken(b []byte) *AccountUpdate {
	au.mutation.SetRefreshToken(b)
	return au
}

// AddServerIDs adds the "servers" edge to the Server entity by IDs.
func (au *AccountUpdate) AddServerIDs(ids ...int) *AccountUpdate {
	au.mutation.AddServerIDs(ids...)
	return au
}

// AddServers adds the "servers" edges to the Server entity.
func (au *AccountUpdate) AddServers(s ...*Server) *AccountUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddServerIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (au *AccountUpdate) AddNodeIDs(ids ...int) *AccountUpdate {
	au.mutation.AddNodeIDs(ids...)
	return au
}

// AddNodes adds the "nodes" edges to the Node entity.
func (au *AccountUpdate) AddNodes(n ...*Node) *AccountUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.AddNodeIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (au *AccountUpdate) Mutation() *AccountMutation {
	return au.mutation
}

// ClearServers clears all "servers" edges to the Server entity.
func (au *AccountUpdate) ClearServers() *AccountUpdate {
	au.mutation.ClearServers()
	return au
}

// RemoveServerIDs removes the "servers" edge to Server entities by IDs.
func (au *AccountUpdate) RemoveServerIDs(ids ...int) *AccountUpdate {
	au.mutation.RemoveServerIDs(ids...)
	return au
}

// RemoveServers removes "servers" edges to Server entities.
func (au *AccountUpdate) RemoveServers(s ...*Server) *AccountUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveServerIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (au *AccountUpdate) ClearNodes() *AccountUpdate {
	au.mutation.ClearNodes()
	return au
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (au *AccountUpdate) RemoveNodeIDs(ids ...int) *AccountUpdate {
	au.mutation.RemoveNodeIDs(ids...)
	return au
}

// RemoveNodes removes "nodes" edges to Node entities.
func (au *AccountUpdate) RemoveNodes(n ...*Node) *AccountUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.RemoveNodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AccountUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := account.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AccountUpdate) check() error {
	if v, ok := au.mutation.Username(); ok {
		if err := account.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Account.username": %w`, err)}
		}
	}
	if v, ok := au.mutation.RegistrationToken(); ok {
		if err := account.RegistrationTokenValidator(v); err != nil {
			return &ValidationError{Name: "registration_token", err: fmt.Errorf(`ent: validator failed for field "Account.registration_token": %w`, err)}
		}
	}
	if v, ok := au.mutation.AccessToken(); ok {
		if err := account.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "Account.access_token": %w`, err)}
		}
	}
	if v, ok := au.mutation.RefreshToken(); ok {
		if err := account.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "Account.refresh_token": %w`, err)}
		}
	}
	return nil
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.SetField(account.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.Username(); ok {
		_spec.SetField(account.FieldUsername, field.TypeString, value)
	}
	if value, ok := au.mutation.RegistrationToken(); ok {
		_spec.SetField(account.FieldRegistrationToken, field.TypeBytes, value)
	}
	if value, ok := au.mutation.AccessToken(); ok {
		_spec.SetField(account.FieldAccessToken, field.TypeBytes, value)
	}
	if value, ok := au.mutation.RefreshToken(); ok {
		_spec.SetField(account.FieldRefreshToken, field.TypeBytes, value)
	}
	if au.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ServersTable,
			Columns: []string{account.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedServersIDs(); len(nodes) > 0 && !au.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ServersTable,
			Columns: []string{account.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ServersTable,
			Columns: []string{account.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NodesTable,
			Columns: []string{account.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedNodesIDs(); len(nodes) > 0 && !au.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NodesTable,
			Columns: []string{account.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NodesTable,
			Columns: []string{account.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountMutation
}

// SetUpdateTime sets the "update_time" field.
func (auo *AccountUpdateOne) SetUpdateTime(t time.Time) *AccountUpdateOne {
	auo.mutation.SetUpdateTime(t)
	return auo
}

// SetUsername sets the "username" field.
func (auo *AccountUpdateOne) SetUsername(s string) *AccountUpdateOne {
	auo.mutation.SetUsername(s)
	return auo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableUsername(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetUsername(*s)
	}
	return auo
}

// SetRegistrationToken sets the "registration_token" field.
func (auo *AccountUpdateOne) SetRegistrationToken(b []byte) *AccountUpdateOne {
	auo.mutation.SetRegistrationToken(b)
	return auo
}

// SetAccessToken sets the "access_token" field.
func (auo *AccountUpdateOne) SetAccessToken(b []byte) *AccountUpdateOne {
	auo.mutation.SetAccessToken(b)
	return auo
}

// SetRefreshToken sets the "refresh_token" field.
func (auo *AccountUpdateOne) SetRefreshToken(b []byte) *AccountUpdateOne {
	auo.mutation.SetRefreshToken(b)
	return auo
}

// AddServerIDs adds the "servers" edge to the Server entity by IDs.
func (auo *AccountUpdateOne) AddServerIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.AddServerIDs(ids...)
	return auo
}

// AddServers adds the "servers" edges to the Server entity.
func (auo *AccountUpdateOne) AddServers(s ...*Server) *AccountUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddServerIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (auo *AccountUpdateOne) AddNodeIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.AddNodeIDs(ids...)
	return auo
}

// AddNodes adds the "nodes" edges to the Node entity.
func (auo *AccountUpdateOne) AddNodes(n ...*Node) *AccountUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.AddNodeIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (auo *AccountUpdateOne) Mutation() *AccountMutation {
	return auo.mutation
}

// ClearServers clears all "servers" edges to the Server entity.
func (auo *AccountUpdateOne) ClearServers() *AccountUpdateOne {
	auo.mutation.ClearServers()
	return auo
}

// RemoveServerIDs removes the "servers" edge to Server entities by IDs.
func (auo *AccountUpdateOne) RemoveServerIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.RemoveServerIDs(ids...)
	return auo
}

// RemoveServers removes "servers" edges to Server entities.
func (auo *AccountUpdateOne) RemoveServers(s ...*Server) *AccountUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveServerIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (auo *AccountUpdateOne) ClearNodes() *AccountUpdateOne {
	auo.mutation.ClearNodes()
	return auo
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (auo *AccountUpdateOne) RemoveNodeIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.RemoveNodeIDs(ids...)
	return auo
}

// RemoveNodes removes "nodes" edges to Node entities.
func (auo *AccountUpdateOne) RemoveNodes(n ...*Node) *AccountUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.RemoveNodeIDs(ids...)
}

// Where appends a list predicates to the AccountUpdate builder.
func (auo *AccountUpdateOne) Where(ps ...predicate.Account) *AccountUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccountUpdateOne) Select(field string, fields ...string) *AccountUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Account entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AccountUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := account.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AccountUpdateOne) check() error {
	if v, ok := auo.mutation.Username(); ok {
		if err := account.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Account.username": %w`, err)}
		}
	}
	if v, ok := auo.mutation.RegistrationToken(); ok {
		if err := account.RegistrationTokenValidator(v); err != nil {
			return &ValidationError{Name: "registration_token", err: fmt.Errorf(`ent: validator failed for field "Account.registration_token": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AccessToken(); ok {
		if err := account.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "Account.access_token": %w`, err)}
		}
	}
	if v, ok := auo.mutation.RefreshToken(); ok {
		if err := account.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "Account.refresh_token": %w`, err)}
		}
	}
	return nil
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (_node *Account, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Account.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, account.FieldID)
		for _, f := range fields {
			if !account.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != account.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.SetField(account.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Username(); ok {
		_spec.SetField(account.FieldUsername, field.TypeString, value)
	}
	if value, ok := auo.mutation.RegistrationToken(); ok {
		_spec.SetField(account.FieldRegistrationToken, field.TypeBytes, value)
	}
	if value, ok := auo.mutation.AccessToken(); ok {
		_spec.SetField(account.FieldAccessToken, field.TypeBytes, value)
	}
	if value, ok := auo.mutation.RefreshToken(); ok {
		_spec.SetField(account.FieldRefreshToken, field.TypeBytes, value)
	}
	if auo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ServersTable,
			Columns: []string{account.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedServersIDs(); len(nodes) > 0 && !auo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ServersTable,
			Columns: []string{account.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ServersTable,
			Columns: []string{account.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NodesTable,
			Columns: []string{account.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedNodesIDs(); len(nodes) > 0 && !auo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NodesTable,
			Columns: []string{account.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NodesTable,
			Columns: []string{account.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Account{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
