// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "registration_token", Type: field.TypeBytes},
		{Name: "access_token", Type: field.TypeBytes, Unique: true},
		{Name: "refresh_token", Type: field.TypeBytes, Unique: true},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "account_username",
				Unique:  true,
				Columns: []*schema.Column{AccountsColumns[3]},
			},
			{
				Name:    "account_access_token",
				Unique:  true,
				Columns: []*schema.Column{AccountsColumns[5]},
			},
		},
	}
	// NodesColumns holds the columns for the "nodes" table.
	NodesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "account_nodes", Type: field.TypeInt},
		{Name: "server_nodes", Type: field.TypeInt},
	}
	// NodesTable holds the schema information for the "nodes" table.
	NodesTable = &schema.Table{
		Name:       "nodes",
		Columns:    NodesColumns,
		PrimaryKey: []*schema.Column{NodesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "nodes_accounts_nodes",
				Columns:    []*schema.Column{NodesColumns[4]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "nodes_servers_nodes",
				Columns:    []*schema.Column{NodesColumns[5]},
				RefColumns: []*schema.Column{ServersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "node_account_nodes",
				Unique:  false,
				Columns: []*schema.Column{NodesColumns[4]},
			},
			{
				Name:    "node_server_nodes",
				Unique:  false,
				Columns: []*schema.Column{NodesColumns[5]},
			},
		},
	}
	// ServersColumns holds the columns for the "servers" table.
	ServersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "account_servers", Type: field.TypeInt},
	}
	// ServersTable holds the schema information for the "servers" table.
	ServersTable = &schema.Table{
		Name:       "servers",
		Columns:    ServersColumns,
		PrimaryKey: []*schema.Column{ServersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "servers_accounts_servers",
				Columns:    []*schema.Column{ServersColumns[4]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "server_account_servers",
				Unique:  false,
				Columns: []*schema.Column{ServersColumns[4]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		NodesTable,
		ServersTable,
	}
)

func init() {
	NodesTable.ForeignKeys[0].RefTable = AccountsTable
	NodesTable.ForeignKeys[1].RefTable = ServersTable
	ServersTable.ForeignKeys[0].RefTable = AccountsTable
}
