// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/database64128/proxy-sharing-go/ent/account"
	"github.com/database64128/proxy-sharing-go/ent/registrationtoken"
)

// RegistrationTokenCreate is the builder for creating a RegistrationToken entity.
type RegistrationTokenCreate struct {
	config
	mutation *RegistrationTokenMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (rtc *RegistrationTokenCreate) SetCreateTime(t time.Time) *RegistrationTokenCreate {
	rtc.mutation.SetCreateTime(t)
	return rtc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rtc *RegistrationTokenCreate) SetNillableCreateTime(t *time.Time) *RegistrationTokenCreate {
	if t != nil {
		rtc.SetCreateTime(*t)
	}
	return rtc
}

// SetUpdateTime sets the "update_time" field.
func (rtc *RegistrationTokenCreate) SetUpdateTime(t time.Time) *RegistrationTokenCreate {
	rtc.mutation.SetUpdateTime(t)
	return rtc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rtc *RegistrationTokenCreate) SetNillableUpdateTime(t *time.Time) *RegistrationTokenCreate {
	if t != nil {
		rtc.SetUpdateTime(*t)
	}
	return rtc
}

// SetName sets the "name" field.
func (rtc *RegistrationTokenCreate) SetName(s string) *RegistrationTokenCreate {
	rtc.mutation.SetName(s)
	return rtc
}

// SetToken sets the "token" field.
func (rtc *RegistrationTokenCreate) SetToken(b []byte) *RegistrationTokenCreate {
	rtc.mutation.SetToken(b)
	return rtc
}

// AddRegistrationIDs adds the "registrations" edge to the Account entity by IDs.
func (rtc *RegistrationTokenCreate) AddRegistrationIDs(ids ...int) *RegistrationTokenCreate {
	rtc.mutation.AddRegistrationIDs(ids...)
	return rtc
}

// AddRegistrations adds the "registrations" edges to the Account entity.
func (rtc *RegistrationTokenCreate) AddRegistrations(a ...*Account) *RegistrationTokenCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rtc.AddRegistrationIDs(ids...)
}

// Mutation returns the RegistrationTokenMutation object of the builder.
func (rtc *RegistrationTokenCreate) Mutation() *RegistrationTokenMutation {
	return rtc.mutation
}

// Save creates the RegistrationToken in the database.
func (rtc *RegistrationTokenCreate) Save(ctx context.Context) (*RegistrationToken, error) {
	rtc.defaults()
	return withHooks(ctx, rtc.sqlSave, rtc.mutation, rtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *RegistrationTokenCreate) SaveX(ctx context.Context) *RegistrationToken {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtc *RegistrationTokenCreate) Exec(ctx context.Context) error {
	_, err := rtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtc *RegistrationTokenCreate) ExecX(ctx context.Context) {
	if err := rtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtc *RegistrationTokenCreate) defaults() {
	if _, ok := rtc.mutation.CreateTime(); !ok {
		v := registrationtoken.DefaultCreateTime()
		rtc.mutation.SetCreateTime(v)
	}
	if _, ok := rtc.mutation.UpdateTime(); !ok {
		v := registrationtoken.DefaultUpdateTime()
		rtc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *RegistrationTokenCreate) check() error {
	if _, ok := rtc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "RegistrationToken.create_time"`)}
	}
	if _, ok := rtc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "RegistrationToken.update_time"`)}
	}
	if _, ok := rtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RegistrationToken.name"`)}
	}
	if v, ok := rtc.mutation.Name(); ok {
		if err := registrationtoken.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RegistrationToken.name": %w`, err)}
		}
	}
	if _, ok := rtc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "RegistrationToken.token"`)}
	}
	if v, ok := rtc.mutation.Token(); ok {
		if err := registrationtoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "RegistrationToken.token": %w`, err)}
		}
	}
	return nil
}

func (rtc *RegistrationTokenCreate) sqlSave(ctx context.Context) (*RegistrationToken, error) {
	if err := rtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rtc.mutation.id = &_node.ID
	rtc.mutation.done = true
	return _node, nil
}

func (rtc *RegistrationTokenCreate) createSpec() (*RegistrationToken, *sqlgraph.CreateSpec) {
	var (
		_node = &RegistrationToken{config: rtc.config}
		_spec = sqlgraph.NewCreateSpec(registrationtoken.Table, sqlgraph.NewFieldSpec(registrationtoken.FieldID, field.TypeInt))
	)
	if value, ok := rtc.mutation.CreateTime(); ok {
		_spec.SetField(registrationtoken.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := rtc.mutation.UpdateTime(); ok {
		_spec.SetField(registrationtoken.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := rtc.mutation.Name(); ok {
		_spec.SetField(registrationtoken.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rtc.mutation.Token(); ok {
		_spec.SetField(registrationtoken.FieldToken, field.TypeBytes, value)
		_node.Token = value
	}
	if nodes := rtc.mutation.RegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registrationtoken.RegistrationsTable,
			Columns: []string{registrationtoken.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RegistrationTokenCreateBulk is the builder for creating many RegistrationToken entities in bulk.
type RegistrationTokenCreateBulk struct {
	config
	err      error
	builders []*RegistrationTokenCreate
}

// Save creates the RegistrationToken entities in the database.
func (rtcb *RegistrationTokenCreateBulk) Save(ctx context.Context) ([]*RegistrationToken, error) {
	if rtcb.err != nil {
		return nil, rtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*RegistrationToken, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegistrationTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *RegistrationTokenCreateBulk) SaveX(ctx context.Context) []*RegistrationToken {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcb *RegistrationTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := rtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcb *RegistrationTokenCreateBulk) ExecX(ctx context.Context) {
	if err := rtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
